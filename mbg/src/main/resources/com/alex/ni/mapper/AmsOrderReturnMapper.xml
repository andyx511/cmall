<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.alex.ni.mapper.AmsOrderReturnMapper">
  <resultMap id="BaseResultMap" type="com.alex.ni.model.AmsOrderReturn">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="order_id" jdbcType="INTEGER" property="orderId" />
    <result column="reason" jdbcType="VARCHAR" property="reason" />
    <result column="return_money" jdbcType="VARCHAR" property="returnMoney" />
    <result column="apply_time" jdbcType="TIMESTAMP" property="applyTime" />
    <result column="user_name" jdbcType="VARCHAR" property="userName" />
    <result column="apply_status" jdbcType="VARCHAR" property="applyStatus" />
    <result column="handle_time" jdbcType="TIMESTAMP" property="handleTime" />
    <result column="handle_note" jdbcType="VARCHAR" property="handleNote" />
    <result column="handle_man" jdbcType="VARCHAR" property="handleMan" />
    <result column="receiver" jdbcType="VARCHAR" property="receiver" />
    <result column="receive_time" jdbcType="TIMESTAMP" property="receiveTime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, order_id, reason, return_money, apply_time, user_name, apply_status, handle_time, 
    handle_note, handle_man, receiver, receive_time
  </sql>
  <select id="selectByExample" parameterType="com.alex.ni.model.AmsOrderReturnExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from ams_order_return
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from ams_order_return
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from ams_order_return
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.alex.ni.model.AmsOrderReturnExample">
    delete from ams_order_return
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.alex.ni.model.AmsOrderReturn">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into ams_order_return (order_id, reason, return_money, 
      apply_time, user_name, apply_status, 
      handle_time, handle_note, handle_man, 
      receiver, receive_time)
    values (#{orderId,jdbcType=INTEGER}, #{reason,jdbcType=VARCHAR}, #{returnMoney,jdbcType=VARCHAR}, 
      #{applyTime,jdbcType=TIMESTAMP}, #{userName,jdbcType=VARCHAR}, #{applyStatus,jdbcType=VARCHAR}, 
      #{handleTime,jdbcType=TIMESTAMP}, #{handleNote,jdbcType=VARCHAR}, #{handleMan,jdbcType=VARCHAR}, 
      #{receiver,jdbcType=VARCHAR}, #{receiveTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.alex.ni.model.AmsOrderReturn">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into ams_order_return
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="orderId != null">
        order_id,
      </if>
      <if test="reason != null">
        reason,
      </if>
      <if test="returnMoney != null">
        return_money,
      </if>
      <if test="applyTime != null">
        apply_time,
      </if>
      <if test="userName != null">
        user_name,
      </if>
      <if test="applyStatus != null">
        apply_status,
      </if>
      <if test="handleTime != null">
        handle_time,
      </if>
      <if test="handleNote != null">
        handle_note,
      </if>
      <if test="handleMan != null">
        handle_man,
      </if>
      <if test="receiver != null">
        receiver,
      </if>
      <if test="receiveTime != null">
        receive_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="orderId != null">
        #{orderId,jdbcType=INTEGER},
      </if>
      <if test="reason != null">
        #{reason,jdbcType=VARCHAR},
      </if>
      <if test="returnMoney != null">
        #{returnMoney,jdbcType=VARCHAR},
      </if>
      <if test="applyTime != null">
        #{applyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="userName != null">
        #{userName,jdbcType=VARCHAR},
      </if>
      <if test="applyStatus != null">
        #{applyStatus,jdbcType=VARCHAR},
      </if>
      <if test="handleTime != null">
        #{handleTime,jdbcType=TIMESTAMP},
      </if>
      <if test="handleNote != null">
        #{handleNote,jdbcType=VARCHAR},
      </if>
      <if test="handleMan != null">
        #{handleMan,jdbcType=VARCHAR},
      </if>
      <if test="receiver != null">
        #{receiver,jdbcType=VARCHAR},
      </if>
      <if test="receiveTime != null">
        #{receiveTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.alex.ni.model.AmsOrderReturnExample" resultType="java.lang.Long">
    select count(*) from ams_order_return
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update ams_order_return
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.orderId != null">
        order_id = #{record.orderId,jdbcType=INTEGER},
      </if>
      <if test="record.reason != null">
        reason = #{record.reason,jdbcType=VARCHAR},
      </if>
      <if test="record.returnMoney != null">
        return_money = #{record.returnMoney,jdbcType=VARCHAR},
      </if>
      <if test="record.applyTime != null">
        apply_time = #{record.applyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.userName != null">
        user_name = #{record.userName,jdbcType=VARCHAR},
      </if>
      <if test="record.applyStatus != null">
        apply_status = #{record.applyStatus,jdbcType=VARCHAR},
      </if>
      <if test="record.handleTime != null">
        handle_time = #{record.handleTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.handleNote != null">
        handle_note = #{record.handleNote,jdbcType=VARCHAR},
      </if>
      <if test="record.handleMan != null">
        handle_man = #{record.handleMan,jdbcType=VARCHAR},
      </if>
      <if test="record.receiver != null">
        receiver = #{record.receiver,jdbcType=VARCHAR},
      </if>
      <if test="record.receiveTime != null">
        receive_time = #{record.receiveTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update ams_order_return
    set id = #{record.id,jdbcType=INTEGER},
      order_id = #{record.orderId,jdbcType=INTEGER},
      reason = #{record.reason,jdbcType=VARCHAR},
      return_money = #{record.returnMoney,jdbcType=VARCHAR},
      apply_time = #{record.applyTime,jdbcType=TIMESTAMP},
      user_name = #{record.userName,jdbcType=VARCHAR},
      apply_status = #{record.applyStatus,jdbcType=VARCHAR},
      handle_time = #{record.handleTime,jdbcType=TIMESTAMP},
      handle_note = #{record.handleNote,jdbcType=VARCHAR},
      handle_man = #{record.handleMan,jdbcType=VARCHAR},
      receiver = #{record.receiver,jdbcType=VARCHAR},
      receive_time = #{record.receiveTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.alex.ni.model.AmsOrderReturn">
    update ams_order_return
    <set>
      <if test="orderId != null">
        order_id = #{orderId,jdbcType=INTEGER},
      </if>
      <if test="reason != null">
        reason = #{reason,jdbcType=VARCHAR},
      </if>
      <if test="returnMoney != null">
        return_money = #{returnMoney,jdbcType=VARCHAR},
      </if>
      <if test="applyTime != null">
        apply_time = #{applyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="userName != null">
        user_name = #{userName,jdbcType=VARCHAR},
      </if>
      <if test="applyStatus != null">
        apply_status = #{applyStatus,jdbcType=VARCHAR},
      </if>
      <if test="handleTime != null">
        handle_time = #{handleTime,jdbcType=TIMESTAMP},
      </if>
      <if test="handleNote != null">
        handle_note = #{handleNote,jdbcType=VARCHAR},
      </if>
      <if test="handleMan != null">
        handle_man = #{handleMan,jdbcType=VARCHAR},
      </if>
      <if test="receiver != null">
        receiver = #{receiver,jdbcType=VARCHAR},
      </if>
      <if test="receiveTime != null">
        receive_time = #{receiveTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.alex.ni.model.AmsOrderReturn">
    update ams_order_return
    set order_id = #{orderId,jdbcType=INTEGER},
      reason = #{reason,jdbcType=VARCHAR},
      return_money = #{returnMoney,jdbcType=VARCHAR},
      apply_time = #{applyTime,jdbcType=TIMESTAMP},
      user_name = #{userName,jdbcType=VARCHAR},
      apply_status = #{applyStatus,jdbcType=VARCHAR},
      handle_time = #{handleTime,jdbcType=TIMESTAMP},
      handle_note = #{handleNote,jdbcType=VARCHAR},
      handle_man = #{handleMan,jdbcType=VARCHAR},
      receiver = #{receiver,jdbcType=VARCHAR},
      receive_time = #{receiveTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>